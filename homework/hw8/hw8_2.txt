I looked at matplot++ library (https://github.com/alandefreitas/matplotplusplus/tree/master/source/matplot/backend). First off I saw a pretty good example of the dependency inversion principle. The data visualization library is able to be used with a few c++ libraries as its backend (I'm assuming for the data aspects). Therefore instead of relying on the low level implementations the library relies on a high level abstraction called backend interface. With that it can seamlessly switch between the three possible backend libraries. Similarly the library does well with the liskov substitution principle. It has a axes object base class that many other classes have an isA relationship with such as bars, box charts, etc. However it avoids putting legend as an axis object. A Legend has some overlap with these other objects, but is certainly different enough that it is not the same. Some of the solid principles where the library doesn't do as well start with the single responsibility principle. Most axes objects, and legend, and figure all have a large set of methods. To be fair it could be argues that each still have only a singular responsibility: determining the display of the object. However you could break this down into determining the color, the size, etc. Given the amount of methods and possible overlap it might have made sense to make use of composition with other classes that could take on some of those responsibilities. Here also the avoidance of composition hurts the open/closed principle. Many classes rely on long strings of if then or switches. My guess is that if needs change these methods would have to modified all over instead of adding a new class that meets the requirements and can be injected instead. The interface segregation principle is interesting here. The axes objects for example implement a large interface (the axis object interface) and its certainly possible that a user or some other class may not actually want all of those methods. Still though given the end user is likely a person who maybe want to just be able to make a chart with a bunch of different options it might be fine in this case that they get the whole forest with the banana. Overall I think the project does a lot better than I could (its easy to be the critic). The use of interfaces is great and allows for alot of flexibility. The lack of composition strikes me as the biggest area for improvement. Adding more classes that can be injected would help the code base be less brittle and even more open for change.
